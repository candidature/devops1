import java.text.SimpleDateFormat

def ex(msg, admin, submitter ){
    emailext(mimeType: 'text/html', replyTo: admin, 
                 body: 'You did not fill all the fields in the form: ' + msg  + " For job $JOB_NAME , $BUILD_DISPLAY_NAME",
                 subject: 'Missing option while filling form on ' + "$JENKINS_URL",
                 to: submitter )
    echo "$submitter"
    currentBuild.result = 'ABORTED'
    error('MISSING PARAM: ' + msg)
}

pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    //disableConcurrentBuilds()
    timeout(time: 1, unit: 'DAYS')
    timestamps()
  }
  environment {
    USER = "build"
    ADMIN_EMAIL = 'pankaj.gupta@broadcom.com'
    ADMIN_GROUP = ''
    submitter = ''
    ADMIN_OKTA = 'pg942665'
    CONVERTOR = 86400000
    DAYS = 10
    
  }
  parameters{
    //choice(name: 'dry_run', choices: "yes\nno", description: 'Dry run')
    validatingString(name: 'project_name',defaultValue: "NONE", regex: '^[a-zA-Z0-9_]{5,}$', failedValidationMessage: 'Missing Project name', description: 'Enter Your Project name - We capture it for tracking and reporting purpose')
    validatingString(name: 'release_name',defaultValue: "NONE", regex: '^[a-zA-Z0-9_]{5,}$', failedValidationMessage: 'Missing Release name', description: 'Enter Your Release name/number')
    choice(name: 'variant', choices: "IOS\nWebApp/DistributionSystems+Desktop\nAndroid\nMainframe", description: 'Select Variant for VPAT')
    validatingString(name: 'start_date',defaultValue: 'dd/mm/yyyy', regex: '^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.]((19|20)\\d\\d)$' , failedValidationMessage: 'Specify date in proper format', description: 'Tentative VPAT Start Date in dd/mm/yyyy format')
    validatingString(name: 'finish_date',defaultValue: 'dd/mm/yyyy', regex: '^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.]((19|20)\\d\\d)$' , failedValidationMessage: 'Specify date in proper format', description: 'Tentative VPAT End Date in dd/mm/yyyy format')
    validatingString(name: 'release_date',defaultValue: 'dd/mm/yyyy', regex: '^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.]((19|20)\\d\\d)$' , failedValidationMessage: 'Specify date in proper format', description: 'Tentative your product release Date in dd/mm/yyyy format')
    validatingString(name: 'approvers',defaultValue: "$env.ADMIN_OKTA", regex: '^[a-zA-Z0-9_ ,]{5,}$' , failedValidationMessage: 'Specify okta ids seperated by comma', description: 'Workflow approver from your team? (specify list of okta ids')  
      
    
  }
  stages {
  
    stage("check params and Initiate VPAT Request") {
        steps {
            wrap([$class: 'BuildUser']) {
            script {
                submitter = "${BUILD_USER_EMAIL}"
                println(getBinding().hasVariable(params.project_name))
                println(getBinding().hasVariable(params.release_name))
                
                //make some crazy validation
                if ("$params.project_name" == 'NONE') {ex("project_name", "$ADMIN_EMAIL", "${BUILD_USER_EMAIL}")}
                if ("$params.release_name" == 'NONE') {ex("release_name", "$ADMIN_EMAIL", "${BUILD_USER_EMAIL}")}
                currentBuild.displayName = "$project_name"
                currentBuild.description = "Release: $release_name"

              
                

                def start_date_epoch = new SimpleDateFormat('dd/MM/yyyy').parse("$params.start_date".trim()).getTime()
                def finish_date_epoch = new SimpleDateFormat('dd/MM/yyyy').parse("$params.finish_date".trim()).getTime()
                // parse and get epoch
                //start_date_epoch=Date.parse("dd/MM/yyyy'Z'", "$params.start_date")

                echo "start_date_epoch : $start_date_epoch"
                
                
                
                echo "Start date: $start_date_epoch"
                echo "Finish date : $finish_date_epoch"
                if (finish_date_epoch < start_date_epoch) {
                    echo "Finish date is less than start date"
                    env.CALCULATED_DAYS = "$env.DAYS"
                    
                } else {
                    def diff = (finish_date_epoch as double) - (start_date_epoch as double)
                    env.CALCULATED_DAYS = (diff / (env.CONVERTOR as double) ) as Integer    
                    echo "DAYS : $env.CALCULATED_DAYS"
                }
                
            }//end script
            }//end wrap
        }//end steps
    }//end stage
    
    /*stage('Set environment') {
      steps{
        wrap([$class: 'BuildUser']) {
          
          echo "You are ${BUILD_USER}"
        script {
            
          if("${params.dry_run}" == 'yes') {
            currentBuild.result = 'ABORTED'
            error('Current Build aborted, job parameterized')
          }//end if
          
          ansiColor('xterm') {
            echo "hello world"
            echo "$USER"
          }//end ansi
        }//end script
        }//end BuildUser plugin block
        
        }//end steps
    }//end stage
    */
    stage('Sending VPAT documents in email') {
      steps{
          wrap([$class: 'BuildUser']) {
        script {
        echo "Sending documents by email to ..."
        echo "$ADMIN_EMAIL"
        
        echo "${params.email}"
        emailext(mimeType: 'text/html', replyTo: "$ADMIN_EMAIL", 
                 body: """Hello , <br>${BUILD_USER_EMAIL} <br>
                 <br><br>
                 We have received your request for VPAT, now as per new process you will be required to start with VPAT testing <br>
                 and fill the forms. <br>
                 You can download your project specific VPAT form from : https://ent.box.com/s/1obtcid6ml9zcdfcwzf01g51f3mfme40 <br>
                 <br>
                 Project name: $params.project_name <br>
                 Release name: $params.release_name <br>
                 <br>
                 Variant: $params.variant <br>
                 start_date : $params.start_date <br>
                 finish_date : $params.finish_date <br>
                 release_date: $params.release_date <br>
                 approvers : $params.approvers <br>
                 VPAT Admin : $env.ADMIN_EMAIL <br>
                 <br>
                 NEXT STEP: Please click on:  <a href="${BUILD_URL}input"> Specify VPAT filled document url location </a>
                 Thank you! <br>
                 DevOps Team""", 
                 
                 subject: 'VPAT Started - docs and next step', 
                 to: "$submitter, $ADMIN_EMAIL")
        } // end script
          }//end wrap plugin BuildUser
      } //end step
    } //end stage
    
    
    stage('VPAT Testing and Writing completed ->  Now proceed for approval, Approve to proceed and Abort to cancel?') {
      steps{
        script {
        timeout(time: "$env.CALCULATED_DAYS", unit:'DAYS') {
        def userInput = input(
             
                            id: 'Approve1', 
                            message: 'Do NOT click unless you already login! Only authorized person shall approve', 
                            submitter: "$params.approvers" ,
                            submitterParameter: 'approver',
                            parameters: [[
                                $class: 'ValidatingStringParameterDefinition',
                                    name: 'vpat_docs',
                                    failedValidationMessage: 'Minimum 10 characters',
                                    description: 'Specify a Box URL where you have uploaded documents (without spaces)',
                                    regex: '[^ ]{10,}'
                            ]])
          
//String name, String defaultValue, String regex, String failedValidationMessage, String description
//          wrap([$class: 'validatingString']) {
//            def validatedInput = validatingString(name: 'userInput', regex: 'http', failedValidationMessage: 'Failed Regex', description: 'This is sample desc') {  
//          }
          
         
            echo "Documents are at this location as per user input: $userInput"
          
          //vpat_doc = userInput.vpat_docs?:' '
          //echo "VPAT Doc is at : $vpat_doc"
        }//timeout end
        }//script end
      }//step end
      }//stage end
      
    
    stage('VPAT completed, Update testing defects in Rally/JIRA?') {
      steps{
        script {
        echo "VPAT completed by dev, updating testing defects in Rally/JIRA?"
        emailext(mimeType: 'text/html', replyTo: 'xxxx',  body: 'Request for VPAT verification', subject: 'VPAT completed - Verification start', to: 'pankaj.gupta@broadcom.com')
          
        }
      }
    }
    
    
    stage('VPAT process completed, proceed to close the process?') {
      steps{
        script {
            echo "You should close it within 10 days from now else it will automatically timeout"
        timeout(time:10, unit:'DAYS') {
          userInput = input(
                    id: 'Approve1', 
                    message: 'Do NOT click unless you already login! Only authorized person shall approve', 
                    submitterParameter: 'approver' , 
                    parameters: [
                      [$class: 'BooleanParameterDefinition', 
                       defaultValue: true, description: '', name: 'Please confirm you approve this release']])
          
     
          
        }//timeout end
        }//script end
      }//step end
      }//stage end
    
    
    stage('Closure email') {
      steps{
        script {
        echo "Sending process close email ..."
        echo "$ADMIN_EMAIL"
        
        echo "${params.email}"
        emailext(mimeType: 'text/html', replyTo: 'xxxx',  body: 'Request for VPAT verification', subject: 'VPAT completed - Verification start', to: 'pankaj.gupta@broadcom.com')
          
        }
      }
    }
    
    
    stage('Cleaning WS') {
      steps{
        script {
          cleanWs()
        }
      }
    }
    
    
    }//stages end
}
